#!/bin/bash

# Variables
version="2.1 Beta"
installdir="/usr/local/share/iptv-check"
sname=$0
wfile="$installdir/updated.m3u"
strmvld=""
downtime="2"
online="0"
consecutive_off=0
max_consecutive_off=5

# Setup colors
cyan='\e[0;36m'
green='\033[92m'
red='\e[1;31m'
yellow='\e[0;33m'
orange='\e[38;5;166m'
reset='\e[0m'

# Check network connectivity
function chknet() {
    echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "$red""- Not connected to Internet$reset"
        echo -e "$green""(This tool requires Internet Connection)$reset"
        exit 1
    fi
}

# Install to /usr/local/sbin and create fixed working directories
if [[ ! -d "$installdir" ]]; then
    mkdir -p "$installdir/temp" >/dev/null 2>&1
    cp $0 /usr/local/sbin/$0 >/dev/null 2>&1
    chmod +x /usr/local/sbin/$0 >/dev/null 2>&1
    echo -e "$green""- Iptv-check $version was installed on your system$reset"
    echo -e "$green""  From now on you can run it from any place on your shell$reset"
    echo -e "$green""  To run it just write :$cyan iptv-check$reset" 
    echo -ne "$yellow" "Press ENTER Key to continue$reset"
    read -r continue
fi

# Clean any files from previous run in temp folder
rm -rf $installdir/temp/* >/dev/null 2>&1

# Warning is a simple message that will display every 40 checks on streams to explain user how to quit
warn() {
    if [[ $i -gt $wrn ]]; then
        wrn=$((wrn+40))
    else
        if [[ $i == "$wrn" ]]; then
            echo ""
            echo -e "$red""Press CTRL+C To Stop or Abort IPTV list check"
            echo ""
        fi
    fi
}

# Ctrl+C Interrupt to stop the script
trap ctrl_c INT
function ctrl_c() {
    if [[ -f "$installdir/temp/pid.tmp" ]]; then
        pid=$(sed -n 1p < "$installdir/temp/pid.tmp")
        rpid=$(ps -p "$pid" -o pid= | awk '{print$1}')
        if [[ "$rpid" == "$pid" ]]; then
            kill $pid >/dev/null 2>&1
            exit 1
        else
            exit 1
        fi
    else
        exit 1
    fi
}

# Display logo and check dependencies
logo() {
    echo -e "$green" "IPTV-Check Tool $version$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    echo -e "$blue" "http://github.com/peterpt$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    chknet
    echo -e "$red" "       NOTE$reset"
    echo -e "$green""This tool will download $downtime seconds of each stream to check$reset"
    echo -e "if every link in m3u file is valid , so , it may take a while$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    echo ""

    # Check for wget if it is installed
    which wget > /dev/null 2>&1
    if [ "$?" -eq "1" ]; then
        echo -e "$red" "Wget Missing$reset"
        echo ""
        echo -e "$yellow" "Try : apt-get install wget$reset"
        exit 1
    fi 
    
    which ffmpeg > /dev/null 2>&1
    if [ "$?" -eq "1" ]; then
        echo -e "$red" "ffmpeg Missing$reset"
        echo ""
        echo -e "$yellow" "Try : apt-get install ffmpeg$reset"
        exit 1
    fi 
    
    which tesseract > /dev/null 2>&1
    if [ "$?" -eq "1" ]; then
        echo -e "$red" "OCR Missing$reset"
        echo ""
        echo -e "$yellow" "Try : apt-get install tesseract-ocr libtesseract-dev tesseract-ocr-eng$reset"
        exit 1
    fi 
}

# The difference between writefile and writefile2 is that (writefile2) is to process the output from m3u files based in xml codes 
# while function (writefile) is to process in output file the conventional m3u files without xml codes in it
function writefile2() {
    if [[ -f "$wfile" ]]; then
        gturlline=$(grep -n "\<$chkf\>"<$installdir/temp/2 | tr ":" "\n" | sed -n 1p)
        stdata=$(sed -n "$gturlline p"< $installdir/temp/2 | awk '{$1=""; print $0}')
        echo "#EXTINF:-1 ,$stdata" >> "$wfile"
        echo "$chkf" >> "$wfile"
        echo "" >> "$wfile"
    else
        echo "#EXTM3U" > "$wfile"
        echo "" >> "$wfile"
        gturlline=$(grep -n "\<$chkf\>"<$installdir/temp/2 | tr ":" "\n" | sed -n 1p)
        stdata=$(sed -n "$gturlline p"< $installdir/temp/2 | awk '{$1=""; print $0}')
        echo "#EXTINF:-1 ,$stdata" >> "$wfile"
        echo "$chkf" >> "$wfile"
        echo "" >> "$wfile"
    fi
}

function writefile() {
    # Check if tool already created previously an m3u file
    if [[ -f "$wfile" ]]; then
        # Search for that specific url in original file and get line number
        gturlline=$(grep -n "$chkf"<$installdir/temp/1 | tr ":" "\n" | sed -n 1p)
        # This variable will get the line number before the previous url (this is to get channel name)
        defline=$((gturlline-1))
        stdata=$(sed -n "$defline p"< $installdir/temp/1)
        echo "$stdata" >> "$wfile"
        echo "$chkf" >> "$wfile"
        echo "" >> "$wfile"
    else
        echo "#EXTM3U" > "$wfile"
        echo "" >> "$wfile"
        gturlline=$(grep -n "$chkf"<$installdir/temp/1 | tr ":" "\n" | sed -n 1p)
        defline=$((gturlline-1))
        stdata=$(sed -n "$defline p"< $installdir/temp/1)
        echo "$stdata" >> "$wfile"
        echo "$chkf" >> "$wfile"
        echo "" >> "$wfile"
    fi
}

# Checking if valid streams are really valid or have a bad login
function ocr() {
    ffmpeg -ss 00:00:02 -i "$installdir/temp/stream.mp4" -frames:v 1 "$installdir/temp/stream.png"
    tesseract -l eng "$installdir/temp/stream.png" "$installdir/temp/test"
    chktxt=$(grep -i "error" "$installdir/temp/test.txt")
    if [[ -z "$chktxt" ]]; then
        strmvld="1"
        online=$((online+1))
    else
        strmvld="0"
    fi
}

# Function for m3u files with xml content
function xmlproc() {
    consecutive_off=0
    
    # Find http links only and delete all the other xml codes in the file
    # This works with many tests i did, but it may need more filtering for m3u files with more xml functions in it
    grep -F "http" < $installdir/temp/1 | \
        sed 's/<link>//g' | \
        sed 's/^.*http/http/' | \
        sed 's/&amp.*|//' | \
        sed -e 's/\(.ts\).*\(=\)/\1\2/' | \
        sed 's/=/ /g' | \
        sed "s~</link>~ ~g" > $installdir/temp/2
    
    srvnmb=$(wc -l "$installdir/temp/2" | awk '{print$1}')
    rm -rf "$installdir/temp/stream.mp4" >/dev/null 2>&1
    rm -rf "$installdir/temp/pid.tmp" >/dev/null 2>&1
    echo ""
    echo -e "$red""Press CTRL+C To Stop or Abort IPTV list check"
    echo ""
    
    for i in $(seq "$srvnmb"); do
        chkf=$(sed -n "${i}p" < "$installdir/temp/2" | awk {'print$1'})
        chkurl=$(echo "$chkf" | head -c 4)
        
        case "$chkurl" in
            http|rtmp|HTTP)
                ffmpeg -t $downtime -i "$chkf" -vsync 0 -acodec copy -vcodec copy -tls_verify 0 "$installdir/temp/stream.mp4"
                
                if [[ ! -f "$installdir/temp/stream.mp4" ]]; then
                    echo -e "$yellow" "Error reading captured file"
                    consecutive_off=$((consecutive_off+1))
                else
                    stsz=$(wc -c "$installdir/temp/stream.mp4" | awk '{print$1}')
                    if [[ "$stsz" -le "500" ]]; then
                        echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$red OFF"
                        consecutive_off=$((consecutive_off+1))
                    else
                        ocr
                        if [[ "$strmvld" == "1" ]]; then
                            echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$green ON"
                            consecutive_off=0  # Reset counter on successful link
                            writefile2
                        else
                            echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$red OFF (Bad Login)"
                            consecutive_off=$((consecutive_off+1))
                            strmvld=""
                        fi
                    fi
                fi
                
                # Check if we've hit the maximum consecutive OFF links
                if [[ $consecutive_off -ge $max_consecutive_off ]]; then
                    echo ""
                    echo -e "$red" "Stopping: $max_consecutive_off consecutive links are OFF$reset"
                    echo -e "$yellow" "Script terminated due to too many consecutive failures$reset"
                    echo ""
                    if [[ -f "$wfile" ]]; then
                        echo -e "$green" "Partial results saved to:$reset"
                        echo -e "$orange" "$wfile$reset"
                        echo -e "$green" "Got $online Online Channels before termination$reset"
                    fi
                    exit 1
                fi
                ;;
            *)
                ;;
        esac
        
        rm -rf $installdir/temp/*.png >/dev/null 2>&1
        rm -rf $installdir/temp/stream >/dev/null 2>&1
        rm -rf $installdir/temp/*.txt >/dev/null 2>&1
        rm -rf $installdir/temp/pid.tmp >/dev/null 2>&1
        warn
    done
    
    if [[ "$exts" == "0" ]]; then
        if [[ -f "$wfile" ]]; then
            echo ""
            echo -e "$green" "Job Finished$reset"
            echo ""
            echo -e "$green" "Got $online Online Channels$reset"
            echo ""
            echo -e "$yellow" "You can find your new iptv list in :$reset"
            echo -e "$orange" "$wfile$reset"
            exit 1
        fi
    else
        echo ""
        echo -e "$green" "Job Finished$reset"
        echo ""
        echo -e "$green" "Got $online Online Channels$reset"
        echo ""
        echo -e "$yellow" "Your iptv list was update in :$reset"
        echo -e "$orange" "$wfile$reset"
        exit 1
    fi
}

# Function that will download for specific time the test stream
function teststream() {
    wrn="0"
    consecutive_off=0
    
    # Check if tool already created a previous m3u file
    if [[ -f "$wfile" ]]; then
        exts="1"
    else
        exts="0"
    fi

    # Check if m3u file have xml content
    ckf=$(grep "<item>" <$installdir/temp/1)
    if [[ ! -z "$ckf" ]]; then
        xmlproc
    fi 
    
    # Check for the http links in m3u file
    glnk=$(grep -F "http" < "$installdir/temp/1" | \
           sed '/EXTINF/d' | \
           sed '/EXTVLCOPT/d' | \
           sed '/EXTM3U/d' | \
           awk '!a[$0]++' | \
           sed '/^$/d')

    # Write all the http links only to a new file so they can be checked ahead
    echo "$glnk" | tr " " "\n" > "$installdir/temp/2"
    
    # Count how many links must be checked
    srvnmb=$(wc -l "$installdir/temp/2" | awk '{print$1}')
    
    # Remove any previous temp pid files and stream captures from previous run
    rm -rf "$installdir/temp/stream.mp4" >/dev/null 2>&1
    rm -rf "$installdir/temp/pid.tmp" >/dev/null 2>&1
    echo ""
    echo -e "$red""Press CTRL+C To Stop or Abort IPTV list check"
    echo ""

    # Start the stream checks
    for i in $(seq "$srvnmb"); do
        chkf=$(sed -n "${i}p" < "$installdir/temp/2")
        
        # To avoid errors in previous filter, it checks if the link starts with http, rtmp or HTTP
        chkurl=$(echo "$chkf" | head -c 4)
        
        case "$chkurl" in
            http|rtmp|HTTP)
                # Start the stream download with ffmpeg
                ffmpeg -t $downtime -i "$chkf" -vsync 0 -acodec copy -vcodec copy -tls_verify 0 "$installdir/temp/stream.mp4"

                # Check if downloaded stream file is in temp directory
                if [[ ! -f "$installdir/temp/stream.mp4" ]]; then
                    echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$red OFF"
                    consecutive_off=$((consecutive_off+1))
                else
                    # Check the size of the stream file
                    stsz=$(wc -c "$installdir/temp/stream.mp4" | awk '{print$1}')
                    
                    # In case stream file is less than 500 bytes then it is not valid
                    if [[ "$stsz" -le "500" ]]; then
                        echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$red OFF"
                        consecutive_off=$((consecutive_off+1))
                    else
                        ocr
                        if [[ "$strmvld" == "1" ]]; then
                            echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$green ON"
                            consecutive_off=0  # Reset counter on successful link
                            writefile
                        else
                            echo -e "$green" "Link:$yellow $i$green of :$yellow$srvnmb$green is$red OFF (Bad Login)"
                            consecutive_off=$((consecutive_off+1))
                            strmvld=""
                        fi
                    fi
                fi
                
                # Check if we've hit the maximum consecutive OFF links
                if [[ $consecutive_off -ge $max_consecutive_off ]]; then
                    echo ""
                    echo -e "$red" "Stopping: $max_consecutive_off consecutive links are OFF$reset"
                    echo -e "$yellow" "Script terminated due to too many consecutive failures$reset"
                    echo ""
                    if [[ -f "$wfile" ]]; then
                        echo -e "$green" "Partial results saved to:$reset"
                        echo -e "$orange" "$wfile$reset"
                        echo -e "$green" "Got $online Online Channels before termination$reset"
                    fi
                    exit 1
                fi
                ;;
            *)
                ;;
        esac
        
        rm -rf $installdir/temp/*.png >/dev/null 2>&1
        rm -rf $installdir/temp/stream.mp4 >/dev/null 2>&1
        rm -rf $installdir/temp/*.txt >/dev/null 2>&1
        rm -rf $installdir/temp/pid.tmp >/dev/null 2>&1
        warn
    done
    
    if [[ "$exts" == "0" ]]; then
        if [[ -f "$wfile" ]]; then
            echo ""
            echo -e "$green" "Job Finished$reset"
            echo ""
            echo -e "$green" "Got $online Online Channels$reset"
            echo ""
            echo -e "$yellow" "You can find your new iptv list in :$reset"
            echo -e "$orange" "$wfile$reset"
            exit 1
        fi
    else
        echo ""
        echo -e "$green" "Job Finished$reset"
        echo ""
        echo -e "$green" "Got $online Online Channels$reset"
        echo ""
        echo -e "$yellow" "Your iptv list was update in :$reset"
        echo -e "$orange" "$wfile$reset"
        exit 1
    fi
}

# Case user m3u file is remote (http) then run this function
function remotef() {
    # Will download the remote m3u file to temp folder and will check its size
    wget --no-check-certificate \
         --user-agent="Mozilla/10.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36" \
         "$file" -O "$installdir/temp/1" >/dev/null 2>&1
    
    flsz=$(wc -c "$installdir/temp/1" | awk '{print$1}')
    if [[ "$flsz" -le "10" ]]; then
        echo -e "$yellow" "The remote link is down or the file size of it$reset"
        echo -e "$yellow" "     is too small to be an m3u iptv list file$reset"
        echo ""
        exit 0
    fi
    teststream
}

# Local m3u file is loaded here
function localf() {
    if [[ ! -f "$file" ]]; then
        echo -e "$yellow" "The file you specified does not exist$reset"
        echo -e "$yellow" "in :$green $file$reset"
        echo ""
        echo -e "$yellow" "Make sure you wrote the right path of it$reset"
        exit 1
    fi
    
    cp "$file" "$installdir/temp/1" >/dev/null 2>&1
    flsz=$(wc -c "$installdir/temp/1" | awk '{print$1}')
    if [[ "$flsz" -le "10" ]]; then
        echo -e "$yellow" "The file you specified is too small to be an m3u iptv file$reset"
        exit 0
    fi
    teststream
}

# Main execution starts here
if [[ -z $1 ]]; then
    echo -e "$green" "IPTV-Check Tool $version$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    echo -e "$blue" "http://github.com/peterpt$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    echo ""
    echo -e "$orange" "Example for remote list to check :$reset"
    echo -e "$green" "iptv-check http://someurl/somelist.m3u$reset"
    echo ""
    echo -e "$orange" "Example for local list to check :$reset"
    echo -e "$green" "iptv-check /root/mylist.m3u$reset"
    echo ""
    echo -e "$red" "       NOTE$reset"
    echo -e "$green""This tool will download $downtime seconds of each stream to check$reset"
    echo -e "if every link in m3u file is valid , so , it may take a while$reset"
    echo -e "$yellow" "-------------------------------------$reset"
    echo ""
    exit 1
fi

# If a null file name is not found then executes the script again deflecting wget errors to dev/null
if [[ ! -f $installdir/null ]]; then
    echo "0" > $installdir/null
    exec $sname $1 2>/dev/null
    exit 1
fi

# Here it means that script already was loaded and restarted, so delete the null file for the next start
rm -rf $installdir/null >/dev/null 2>&1
logo
file="$1"

# Check if user input is a remote or local file by searching for http word in the user input variable
chkfl=$(echo "$file" | grep "http")
if [ ! -z "$chkfl" ]; then
    remotef
else
    localf
fi

# Ensure colors are reset at script end
echo -ne "$reset"
